// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "RenderingInterface.h"

void RenderingInterface::cb_Load_i(Fl_Button*, void*) {
  const char *strBack = fl_file_chooser("Scene name?", "*.sc", strSceneName.c_str() );

if ( strBack ) {
    renderingUI.readScene( strBack );
    strSceneName = strBack;
}
RedrawWindow();
}
void RenderingInterface::cb_Load(Fl_Button* o, void* v) {
  ((RenderingInterface*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

void RenderingInterface::cb_Ray_i(Fl_Menu_*, void*) {
  RedrawWindow();
}
void RenderingInterface::cb_Ray(Fl_Menu_* o, void* v) {
  ((RenderingInterface*)(o->parent()->user_data()))->cb_Ray_i(o,v);
}

void RenderingInterface::cb_Path_i(Fl_Menu_*, void*) {
  RedrawWindow();
}
void RenderingInterface::cb_Path(Fl_Menu_* o, void* v) {
  ((RenderingInterface*)(o->parent()->user_data()))->cb_Path_i(o,v);
}

void RenderingInterface::cb_Scanline_i(Fl_Menu_*, void*) {
  RedrawWindow();
}
void RenderingInterface::cb_Scanline(Fl_Menu_* o, void* v) {
  ((RenderingInterface*)(o->parent()->user_data()))->cb_Scanline_i(o,v);
}

Fl_Menu_Item RenderingInterface::menu_m_iRenderType[] = {
 {"Ray trace", 0,  (Fl_Callback*)RenderingInterface::cb_Ray, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Path trace", 0,  (Fl_Callback*)RenderingInterface::cb_Path, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Scanline", 0,  (Fl_Callback*)RenderingInterface::cb_Scanline, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RenderingInterface::cb_m_bRenderOn_i(Fl_Button*, void*) {
  if ( m_bRenderOn->value() )
   renderingUI.startRendering();
else
   renderingUI.stopRendering();
}
void RenderingInterface::cb_m_bRenderOn(Fl_Button* o, void* v) {
  ((RenderingInterface*)(o->parent()->user_data()))->cb_m_bRenderOn_i(o,v);
}

Fl_Double_Window* RenderingInterface::make_window() {
  { m_renderWindow = new Fl_Double_Window(310, 250, "Rendering UI");
    m_renderWindow->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(5, 5, 100, 25, "Load scene");
      o->callback((Fl_Callback*)cb_Load);
    } // Fl_Button* o
    { m_txtStatus = new Fl_Output(5, 80, 300, 100, "Status");
      m_txtStatus->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Output* m_txtStatus
    { m_iRenderType = new Fl_Choice(140, 25, 135, 25, "Render Type");
      m_iRenderType->down_box(FL_BORDER_BOX);
      m_iRenderType->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      m_iRenderType->menu(menu_m_iRenderType);
    } // Fl_Choice* m_iRenderType
    { m_iWidth = new Fl_Value_Input(40, 185, 40, 25, "Width");
      m_iWidth->minimum(10);
      m_iWidth->maximum(1024);
      m_iWidth->step(1);
      m_iWidth->value(256);
    } // Fl_Value_Input* m_iWidth
    { m_iHeight = new Fl_Value_Input(125, 185, 40, 25, "Height");
      m_iHeight->minimum(10);
      m_iHeight->maximum(1024);
      m_iHeight->step(1);
      m_iHeight->value(256);
    } // Fl_Value_Input* m_iHeight
    { m_progress = new Fl_Progress(5, 215, 300, 30, "Progress");
      m_progress->selection_color(FL_DARK_GREEN);
    } // Fl_Progress* m_progress
    { m_iTime = new Fl_Value_Output(215, 185, 90, 25, "Time");
    } // Fl_Value_Output* m_iTime
    { m_bRenderOn = new Fl_Button(5, 35, 100, 25, "Start rendering");
      m_bRenderOn->type(1);
      m_bRenderOn->callback((Fl_Callback*)cb_m_bRenderOn);
    } // Fl_Button* m_bRenderOn
    m_renderWindow->end();
  } // Fl_Double_Window* m_renderWindow
  return m_renderWindow;
}

RenderingInterface::RenderingInterface() {
  m_renderWindow = make_window();
  m_progress->minimum(0);
  m_progress->maximum(1);
  strSceneName = "../data/scenes/bujans_raquel.sc";
  renderingUI.setUI( this );
}

UIInterface * RenderingInterface::getUI() {
  return &renderingUI;
}
